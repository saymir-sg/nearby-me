{"version":3,"sources":["components/placesList.js","App.js","components/location.js","serviceWorker.js","index.js"],"names":["PlacesList","props","state","list","isVisible","error","this","getPlaces","prevProps","value","console","log","proxyurl","url","latitude","longitude","fetch","then","res","json","data","results","setState","length","status","catch","className","map","item","index","key","name","vicinity","React","Component","App","filterList","type","eventHandler","filterType","geolocation","navigator","Promise","resolve","reject","Error","getCurrentPosition","position","getLocation","coords","prevState","render","placeComponent","onClick","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5620c19e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass PlacesList extends React.Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.state = {\r\n      list: [],\r\n      isVisible: false,\r\n      error: ''\r\n    }\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getPlaces();\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.value !== this.props.value) {\r\n      this.getPlaces();\r\n    }\r\n  }\r\n\r\n  getPlaces(){\r\n    console.log(this.props);\r\n    let key = 'AIzaSyBnOC2cYnLyaaYXtnd_IEQWZLkqvg0tqoE';\r\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\n    const url = `https://maps.googleapis.com/maps/api/place/nearbysearch/json?location=${this.props.latitude},${this.props.longitude}&radius=1000&types=${this.props.value}&key=${key}`;\r\n    console.log(proxyurl + url);\r\n    \r\n    fetch(proxyurl + url)\r\n    .then(res => {\r\n      return  res.json();\r\n    })\r\n    .then(data => {\r\n      console.log(data.results);\r\n      this.setState({isVisible: data.results.length ? true : false})\r\n      if(this.state.isVisible){\r\n        this.setState({list: data.results});\r\n      }else if(data.results.length == 0){\r\n        this.setState({error: data.status});\r\n      }else{\r\n        this.setState({error: 'Something went wrong!!'})\r\n      }\r\n    })\r\n    .catch(() => console.log(\"Error\"));\r\n  }\r\n\r\n  render() {\r\n      return (\r\n        <div className=\"places_wrapper\">\r\n              {\r\n                this.state.isVisible ?\r\n                <div className=\"places_ul\">\r\n                {\r\n                  this.state.list.map((item, index) => (\r\n                    <div className=\"li_box\" key={index}>\r\n                      <div className=\"inner_box\">\r\n                        <h4 className=\"place_title\">{item.name}</h4>\r\n                        <p className=\"txt\">{item.vicinity}</p>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                }\r\n                </div>\r\n                :\r\n                ( this.state.error !== '' &&  !(this.state.isVisible) ?\r\n      \r\n                  <div className=\"error_div\">\r\n                    <h4>{this.state.error}</h4>\r\n                  </div>\r\n                  :\r\n\r\n                  <div className=\"error_div\">\r\n                     <h4>Something went wrong</h4>\r\n                  </div>\r\n                )\r\n              }\r\n        </div>        \r\n      );\r\n  }\r\n}\r\n\r\nexport default PlacesList","import React from 'react';\nimport PlacesList from './components/placesList';\nimport './App.css';\nimport {getLocation} from './components/location';\n\nclass App extends React.Component {\n\n  constructor(props){\n    super(props);\n\n    this.state = {\n      value: 'atm',\n      latitude: 0,\n      longitude: 0\n    }\n  }\n\n  componentDidMount() {\n    getLocation().then( res =>{\n      console.log(res);\n      let latitude = res.coords.latitude;\n      let longitude = res.coords.longitude;\n      this.setState({latitude: latitude, longitude: longitude});\n    })\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.value !== this.state.value) {\n      this.render();\n    }\n  }\n\n  \n  \n  filterList = [\n    { name: 'ATM', type: 'atm' },\n    { name: 'Airport', type: 'airport' },\n    { name: 'Bank', type: 'bank' },\n    { name: 'Bus station', type: 'bus_station' },\n    { name: 'Hospital', type: 'hospital' },\n    { name: 'Local Government Office', type: 'local_government_office' },\n    { name: 'Pharmacy', type: 'pharmacy' },\n    { name: 'Train Station', type: 'train_station' }\n  ];\n\n  eventHandler = filterType => {\n    console.log('clicked = ', filterType);\n    this.setState({value: filterType});\n  }\n\n  render() {\n\n    let placeComponent;\n\n    if(this.state.latitude > 0 && this.state.longitude > 0){\n      placeComponent = <PlacesList value={this.state.value} latitude={this.state.latitude} longitude={this.state.longitude} />\n    }\n\n    return (\n      <div className=\"App\">\n          <header className=\"header\">\n            <h4 className=\"title text_center\">Nearby Me</h4>\n            <p className=\"text_center\"><strong>Latitude:</strong>{this.state.latitude} <strong>Longitude:</strong> {this.state.longitude}</p> \n            <div className=\"btns_wrapper text_center\">\n              {\n                this.filterList.map((item) => (\n                  <button\n                    key={item.type}\n                    className={\"btn \" + (this.state.value == item.type ? 'active' : '')}\n                    onClick={() => this.eventHandler(item.type)}>\n                      {item.name}\n                  </button>\n                ))\n              }\n            </div>\n            {/* <PlacesList\n              value={this.state.value}\n              latitude={this.state.latitude}\n              longitude={this.state.longitude}\n            /> */}\n            {placeComponent}\n          </header>\n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","export const getLocation = () => {\n    const geolocation = navigator.geolocation;\n    \n    return new Promise((resolve, reject) => {\n      if (!geolocation) {\n        reject(new Error('Not Supported'));\n      }\n      geolocation.getCurrentPosition((position) => {\n        resolve(position);\n      }, () => {\n        reject (new Error('Permission denied'));\n      });\n    });\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}